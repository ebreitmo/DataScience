import matplotlib.pyplot as plt
import numpy as np
from functions import warmUpExercise
from functions import computeCost
from functions import gradientDescent

# ==================== Part 1: Basic Function ===========================
#  Complete warmUpExercise.m
print("Running warmUpExercise ... ");
print("5x5 Identity Matrix: ");
warmUpExercise()

raw_input("Press Enter to continue...")

#  ======================= Part 2: Plotting =============================
x, y = np.loadtxt('ex1data1.txt', delimiter=',', unpack=True)
m = len(y)  # Number of training examples

plt.plot(x,y, 'rx', label='Training data')
plt.xlim(xmin=0)  
plt.ylim(ymin=0)  

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
#plt.show()

# =================== Part 3: Cost and Gradient descent ==================
# Add column of ones to x
X=np.c_[np.ones(m),x]
# Size of matrix, 97x2 matrix
X.size
# Initialization of fitting parameters theta  
theta=np.zeros((2,1))   # 2x1 matrix ,  type(theta)   <type 'numpy.ndarray'>

# Settings for gradient descent
iterations=1500
alpha=0.01

print("Testing the cost function ...")
# Compute and display initial cost
print("With theta = [0 ; 0],  cost computed = %f" %computeCost(X, y, theta)[0]);
print("Expected cost value (approx) 32.07");

# Further testing of the cost function
theta=np.array([[-1],[2]])
J = computeCost(X, y, theta);
print("With theta = [-1 ; 2], Cost computed = %f" %J[0])
print("Expected cost value (approx) 54.24.")

raw_input("Press Enter to continue...")

print("Running Gradient Descent ...")
# Run gradient descent
theta = gradientDescent(X, y, theta, alpha, iterations)

# Print theta to screen
print("Theta found by gradient descent:")
print("Theta_0: %f, Theta_1: %f"  %(theta[0],theta[1]))

print('Expected theta values (approx)')
print(' -3.6303,  1.1664')


# Plot the linear fit
plt.plot(x,np.dot(X,theta), label='Linear regression')                                                                                                            
plt.xlim(xmin=0)                                                                                                                                          
plt.ylim(ymin=0)                                                                                                                                          
plt.xlabel('x')                                                                                                                                           
plt.ylabel('y')                                                                                                                                           
plt.title('Training data with Linear regression')
plt.legend() 
print("Showing plot for 5 seconds")
plt.show(block=False)
plt.pause(5)
plt.close()  


# Predict values for population sizes of 35,000 and 70,000
predict1 = np.dot([1, 3.5],theta)
print('For population = 35,000, we predict a profit of %f' %(predict1[0]*10000))
predict2 = np.dot([1, 7],theta)
print('For population = 70,000, we predict a profit of %f' %(predict2[0]*10000));

